#
# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
- name: CA Create a service
  ignore_errors: yes
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "Service"
      apiVersion: "v1"
      metadata:
        name: "ca"
        namespace: kube-system
        labels:
          id: "ca"
      spec:
        clusterIP: "{{ ca_service_clusterip }}"
        type: ClusterIP 
        selector:
          id: "ca"
        ports:
          - port: 80
            protocol: "TCP"
            name: "rest"
    state: present
  register: ca_details

- name: CA Create a ConfigMap instance in kube-system namespace
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "ConfigMap"
      apiVersion: "v1"
      metadata:
        name: "ca"
        namespace: kube-system
        labels:
          id: "ca"
      data:
        user: "{{ ca_service.user }}"
        pass: "{{ hostvars[groups['k8s-master'][0]].passwords.ca_service.pass }}"
        host: "ca.kube-system"
        port: "80"
        log-level: "DEBUG"

- name: CA Create a ConfigMap instance in default namespace
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "ConfigMap"
      apiVersion: "v1"
      metadata:
        name: "ca"
        labels:
          id: "ca"
      data:
        user: "{{ ca_service.user }}"
        pass: "{{ hostvars[groups['k8s-master'][0]].passwords.ca_service.pass }}"
        host: "ca.kube-system"
        port: "80"
        log-level: "DEBUG"

- name: CA Create a deployment
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data: "{{ lookup('template', 'apps/ca-service.deployment.j2') }}"
    state: present

- name: CA Wait for CA to start
  action: uri url="http://{{ ca_service_clusterip }}/healthz"
  register: result
  until: result.status == 200
  retries: 45
  delay: 15

- name: CA Get CA
  uri:
    url: "http://{{ ca_service_clusterip }}/api/v1/ca"
    method: GET
    user: "{{ ca_service.user }}"
    password: "{{ hostvars[groups['k8s-master'][0]].passwords.ca_service.pass }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
  register: ca_cert

- name: CA Get CA-bundle
  uri:
    url: "http://{{ ca_service_clusterip }}/api/v1/ca-bundle"
    method: GET
    user: "{{ ca_service.user }}"
    password: "{{ hostvars[groups['k8s-master'][0]].passwords.ca_service.pass }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
  register: ca_bundle_cert

- name: CA create secret for ca.pem
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "Secret"
      metadata:
        name: "platform-ca-root-cert"
      data:
        ca.pem: "{{ ca_cert.json['ca_cert'] | b64encode }}"

- name: CA create secret for ca-certificates bundle
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "Secret"
      metadata:
        name: "platform-ca-roots-bundle"
      data:
        ca-certificates.crt: "{{ ca_bundle_cert.json['ca_bundle'] | b64encode }}"

- name: CA create secret for hashed ca.pem
  tapkube:
    api_endpoint: "127.0.0.1:{{ k8s_api_insecure_port }}"
    insecure: true
    inline_data:
      kind: "Secret"
      metadata:
        name: "platform-ca-root-cert-hashed"
      data: "{ '{{ ca_cert.json['hash'] }}.0': '{{ ca_cert.json['ca_cert'] | b64encode }}' }"
